import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression, Ridge, Lasso
from sklearn.metrics import r2_score, mean_squared_error
from sklearn.preprocessing import StandardScaler

df = pd.read_csv(" ")
df

df = df.drop(columns=['Unnamed: 0', 'key'])
df.dropna(inplace=True)

df['pickup_datetime'] = pd.to_datetime(df['pickup_datetime'], errors='coerce')
df['year'] = df['pickup_datetime'].dt.year
df['month'] = df['pickup_datetime'].dt.month
df['day'] = df['pickup_datetime'].dt.day
df['hour'] = df['pickup_datetime'].dt.hour
df['minute'] = df['pickup_datetime'].dt.minute


df.drop('pickup_datetime', axis=1, inplace=True)

import matplotlib.pyplot as plt
df.plot(kind="box", subplots=True, layout = (7,2), figsize= (15,20))

def remove_outliers(df, column):
    Q1 = df[column].quantile(0.25)
    Q3 = df[column].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    df = df[(df[column] >= lower_bound) & (df[column] <= upper_bound)]
    return df

df = remove_outliers(df, 'fare_amount')
df = remove_outliers(df, 'passenger_count')

correlation_matrix = df.corr()
print(correlation_matrix)


import matplotlib.pyplot as plt
import seaborn as sns
plt.figure(figsize= (10,6))
sns.heatmap(df.corr(),annot= True)

X = df.drop('fare_amount', axis=1)
y = df['fare_amount']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

models = {
    'Linear Regression': LinearRegression(),
    'Ridge Regression': Ridge(alpha=1.0), 
    'Lasso Regression': Lasso(alpha=1.0)
}

results = {}
for name, model in models.items():
    model.fit(X_train_scaled, y_train)
    y_pred = model.predict(X_test_scaled)
    r2 = r2_score(y_test, y_pred)
    rmse = np.sqrt(mean_squared_error(y_test, y_pred))
    results[name] = {'R2': r2, 'RMSE': rmse}

for name, metrics in results.items():
    print(f'{name}:')
    print(f'  R2: {metrics["R2"]:.4f}')
    print(f'  RMSE: {metrics["RMSE"]:.4f}')
